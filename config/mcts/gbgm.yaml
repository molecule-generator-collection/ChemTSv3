time_limit: 1200 # Seconds
max_generations: 3000
# seed: 0 # Set seed

output_dir: generation_result
device: cpu # For RNNTransition, using the CPU tends to be faster even in GPU environments.

debug: false # Set to true to enable debug logging
silent: false # Set to true to disable console logging

node_class: CanonicalSMILESStringNode
node_class_variables:
  eos: " "
# root: CC
root: c1ccccc1

transition_class: GBGMTransition
transition_args:
  size_mean: 39.15
  size_std: 3.50

reward_class: JScoreReward

filters:
  - filter_class: ValidityFilter # Checks whether the molecule is valid. Since other filters and rewards typically assume validity and do not recheck it, this filter should usually be applied first in molecular generation.
  - filter_class: RadicalFilter
  - filter_class: HeavyAtomCountFilter
    max: 45

policy_class: UCT
# policy_class: PUCT  # Shares the same arguments with UCT
policy_args:
  c: 0.01
  best_rate: 0.9

generator_class: MCTS
generator_args: # root, transition, reward, policy and filters are automatically included in the arguments.
  n_eval_width: .inf # If the reward calculation is expensive, n_eval_width = 1 might work better.
  n_eval_iters: 1
  n_tries: 1
  filter_reward: -1  # Applies the same fallback reward value to all filter steps
  # filter_reward: [0, 0,1] # Specifies different fallback reward values to each filter step
  avoid_duplicates: false # If set to true, duplicate nodes won't be added to the search tree. Should be true (default value) if the transition forms a cyclic graph. Unneeded if the tree structure of the transition graph is guranteed, and can be set to false to reduce memory usage.
  info_interval: 100  # Interval to log the average reward
  # save_interval: 500  # Interval to save the progress
  
plot_args:
  moving_average_window: 0.05
  reward_top_ps: [0.5, 0.1]